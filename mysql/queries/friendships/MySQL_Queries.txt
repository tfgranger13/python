INSERT INTO friendships (user_id, friend_id) VALUES (1, 2);
INSERT INTO friendships (user_id, friend_id) VALUES (1, 4);
INSERT INTO friendships (user_id, friend_id) VALUES (1, 6);
INSERT INTO friendships (user_id, friend_id) VALUES (2, 1);
INSERT INTO friendships (user_id, friend_id) VALUES (2, 3);
INSERT INTO friendships (user_id, friend_id) VALUES (2, 5);
INSERT INTO friendships (user_id, friend_id) VALUES (3, 2);
INSERT INTO friendships (user_id, friend_id) VALUES (3, 5);
INSERT INTO friendships (user_id, friend_id) VALUES (4, 3);
INSERT INTO friendships (user_id, friend_id) VALUES (5, 1);
INSERT INTO friendships (user_id, friend_id) VALUES (5, 6);
INSERT INTO friendships (user_id, friend_id) VALUES (6, 2);
INSERT INTO friendships (user_id, friend_id) VALUES (6, 3);

Query: Display the relationships create as shown in the above image

SELECT users.first_name, users.last_name, users2.first_name AS friend_first_name, users2.last_name AS friend_last_name
FROM users
JOIN friendships ON user_id = users.id
LEFT JOIN users AS users2 ON friend_id = users2.id;

NINJA Query: Return all users who are friends with the first user, make sure their names are displayed in results.



NINJA Query: Return the count of all friendships



NINJA Query: Find out who has the most friends and return the count of their friends.



NINJA Query: Return the friends of the third user in alphabetical order